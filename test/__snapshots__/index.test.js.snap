// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`base generates the same ESLint configuration file 1`] = `
Object {
  "env": Object {
    "browser": true,
    "es2020": true,
    "node": true,
  },
  "extends": Array [],
  "globals": Object {
    "document": "readonly",
    "navigator": "readonly",
    "window": "readonly",
  },
  "parser": "babel-eslint",
  "parserOptions": Object {
    "ecmaVersion": 2020,
    "sourceType": "module",
  },
  "plugins": Array [
    "eslint-plugin-import",
    "eslint-plugin-levitate",
    "eslint-plugin-node",
    "eslint-plugin-promise",
    "eslint-plugin-unicorn",
  ],
  "rules": Object {
    "array-bracket-newline": Array [
      "error",
      "consistent",
    ],
    "array-bracket-spacing": Array [
      "error",
      "never",
    ],
    "array-element-newline": Array [
      "error",
      "consistent",
    ],
    "arrow-parens": Array [
      "error",
      "as-needed",
    ],
    "arrow-spacing": "error",
    "block-spacing": Array [
      "error",
      "always",
    ],
    "brace-style": "error",
    "camelcase": "warn",
    "comma-dangle": Array [
      "error",
      "always-multiline",
    ],
    "comma-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": false,
      },
    ],
    "comma-style": Array [
      "error",
      "last",
    ],
    "computed-property-spacing": Array [
      "error",
      "never",
    ],
    "consistent-return": "error",
    "constructor-super": "error",
    "curly": Array [
      "error",
      "all",
    ],
    "dot-location": Array [
      "error",
      "property",
    ],
    "dot-notation": Array [
      "error",
      Object {
        "allowKeywords": true,
      },
    ],
    "eol-last": Array [
      "error",
      "always",
    ],
    "eqeqeq": Array [
      "error",
      "always",
      Object {
        "null": "ignore",
      },
    ],
    "func-call-spacing": Array [
      "error",
      "never",
    ],
    "generator-star-spacing": Array [
      "error",
      "after",
    ],
    "import/export": "error",
    "import/first": "error",
    "import/named": "error",
    "import/no-absolute-path": Array [
      "error",
      Object {
        "amd": false,
        "commonjs": true,
        "esmodule": true,
      },
    ],
    "import/no-duplicates": "error",
    "import/no-named-default": "error",
    "import/no-useless-path-segments": "error",
    "indent": Array [
      "error",
      2,
      Object {
        "SwitchCase": 1,
      },
    ],
    "key-spacing": Array [
      "error",
      Object {
        "afterColon": true,
        "beforeColon": false,
      },
    ],
    "keyword-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": true,
      },
    ],
    "levitate/comment": "warn",
    "levitate/import-convention": Array [
      "error",
      Object {
        "default": "classNames",
        "path": "^classnames$",
      },
      Object {
        "default": true,
        "path": "^(?!\\\\.|\\\\/)",
      },
    ],
    "levitate/new-line-within-statement": Array [
      "error",
      Object {
        "maxLength": 80,
      },
    ],
    "levitate/sort-imports": Array [
      "error",
      "manta",
    ],
    "lines-between-class-members": Array [
      "error",
      "always",
      Object {
        "exceptAfterSingleLine": true,
      },
    ],
    "max-nested-callbacks": Array [
      "error",
      4,
    ],
    "max-statements-per-line": Array [
      "error",
      Object {
        "max": 1,
      },
    ],
    "new-cap": Array [
      "error",
      Object {
        "capIsNew": false,
        "newIsCap": true,
        "properties": true,
      },
    ],
    "new-parens": "error",
    "no-array-constructor": "error",
    "no-async-promise-executor": "error",
    "no-compare-neg-zero": "error",
    "no-cond-assign": "error",
    "no-confusing-arrow": "error",
    "no-constant-condition": Array [
      "error",
      Object {
        "checkLoops": false,
      },
    ],
    "no-control-regex": "error",
    "no-debugger": "error",
    "no-delete-var": "error",
    "no-dupe-args": "error",
    "no-dupe-class-members": "error",
    "no-dupe-keys": "error",
    "no-duplicate-case": "error",
    "no-else-return": "error",
    "no-empty": "error",
    "no-empty-character-class": "error",
    "no-empty-pattern": "error",
    "no-eval": "error",
    "no-ex-assign": "error",
    "no-extend-native": "error",
    "no-extra-bind": "error",
    "no-extra-boolean-cast": "error",
    "no-extra-parens": Array [
      "error",
      "functions",
    ],
    "no-fallthrough": "error",
    "no-func-assign": "error",
    "no-global-assign": "error",
    "no-implicit-coercion": Array [
      "error",
      Object {
        "allow": Array [
          "!!",
        ],
      },
    ],
    "no-implied-eval": "error",
    "no-inner-declarations": Array [
      "error",
      "functions",
    ],
    "no-invalid-regexp": "error",
    "no-irregular-whitespace": "error",
    "no-iterator": "error",
    "no-labels": Array [
      "error",
      Object {
        "allowLoop": false,
        "allowSwitch": false,
      },
    ],
    "no-lone-blocks": "error",
    "no-misleading-character-class": "error",
    "no-mixed-spaces-and-tabs": "error",
    "no-multi-spaces": "error",
    "no-multi-str": "error",
    "no-multiple-empty-lines": Array [
      "error",
      Object {
        "max": 1,
        "maxBOF": 0,
        "maxEOF": 1,
      },
    ],
    "no-nested-ternary": "error",
    "no-new": "error",
    "no-new-func": "error",
    "no-new-object": "error",
    "no-new-symbol": "error",
    "no-new-wrappers": "error",
    "no-obj-calls": "error",
    "no-octal": "error",
    "no-octal-escape": "error",
    "no-promise-executor-return": "error",
    "no-proto": "error",
    "no-prototype-builtins": "error",
    "no-redeclare": Array [
      "error",
      Object {
        "builtinGlobals": false,
      },
    ],
    "no-regex-spaces": "error",
    "no-return-assign": Array [
      "error",
      "except-parens",
    ],
    "no-return-await": "error",
    "no-self-assign": Array [
      "error",
      Object {
        "props": true,
      },
    ],
    "no-self-compare": "error",
    "no-sequences": "error",
    "no-shadow-restricted-names": "error",
    "no-sparse-arrays": "error",
    "no-template-curly-in-string": "warn",
    "no-this-before-super": "error",
    "no-throw-literal": "error",
    "no-trailing-spaces": "error",
    "no-undef": "error",
    "no-undef-init": "error",
    "no-unexpected-multiline": "error",
    "no-unmodified-loop-condition": "error",
    "no-unneeded-ternary": Array [
      "error",
      Object {
        "defaultAssignment": false,
      },
    ],
    "no-unreachable": "error",
    "no-unsafe-finally": "error",
    "no-unsafe-negation": "error",
    "no-unused-expressions": Array [
      "error",
      Object {
        "allowShortCircuit": true,
        "allowTaggedTemplates": true,
        "allowTernary": true,
      },
    ],
    "no-unused-vars": Array [
      "error",
      Object {
        "args": "none",
        "ignoreRestSiblings": true,
        "vars": "all",
      },
    ],
    "no-use-before-define": Array [
      "error",
      Object {
        "classes": false,
        "functions": false,
        "variables": false,
      },
    ],
    "no-useless-call": "error",
    "no-useless-catch": "error",
    "no-useless-computed-key": "error",
    "no-useless-concat": "error",
    "no-useless-rename": "error",
    "no-useless-return": "error",
    "no-var": "error",
    "no-whitespace-before-property": "error",
    "no-with": "error",
    "node/handle-callback-err": Array [
      "error",
      "error",
    ],
    "node/no-deprecated-api": "warn",
    "node/no-new-require": "error",
    "node/no-path-concat": "error",
    "node/process-exit-as-throw": "error",
    "object-curly-newline": Array [
      "error",
      Object {
        "ExportDeclaration": Object {
          "consistent": true,
          "multiline": true,
        },
        "ImportDeclaration": "never",
        "ObjectExpression": Object {
          "consistent": true,
          "multiline": true,
        },
        "ObjectPattern": "never",
      },
    ],
    "object-curly-spacing": Array [
      "error",
      "always",
    ],
    "object-property-newline": "error",
    "object-shorthand": Array [
      "error",
      "properties",
    ],
    "operator-linebreak": Array [
      "error",
      "after",
      Object {
        "overrides": Object {
          ":": "before",
          "?": "before",
          "|>": "before",
        },
      },
    ],
    "padding-line-between-statements": Array [
      "error",
      Object {
        "blankLine": "always",
        "next": "*",
        "prev": "directive",
      },
      Object {
        "blankLine": "always",
        "next": "block-like",
        "prev": "*",
      },
      Object {
        "blankLine": "never",
        "next": "block-like",
        "prev": Array [
          "singleline-const",
          "singleline-let",
          "singleline-var",
        ],
      },
      Object {
        "blankLine": "never",
        "next": "case",
        "prev": "case",
      },
      Object {
        "blankLine": "always",
        "next": "*",
        "prev": "block-like",
      },
      Object {
        "blankLine": "always",
        "next": Array [
          "function",
          "try",
        ],
        "prev": "*",
      },
      Object {
        "blankLine": "always",
        "next": Array [
          "const",
          "let",
          "var",
          "export",
          "cjs-export",
          "return",
          "throw",
          "break",
          "continue",
        ],
        "prev": "expression",
      },
    ],
    "prefer-arrow-callback": "error",
    "prefer-const": "error",
    "prefer-promise-reject-errors": "error",
    "promise/param-names": "error",
    "quote-props": Array [
      "error",
      "as-needed",
    ],
    "quotes": Array [
      "error",
      "single",
    ],
    "rest-spread-spacing": Array [
      "error",
      "never",
    ],
    "semi": Array [
      "error",
      "never",
    ],
    "semi-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": false,
      },
    ],
    "space-before-blocks": Array [
      "error",
      "always",
    ],
    "space-before-function-paren": Array [
      "error",
      Object {
        "anonymous": "never",
        "asyncArrow": "always",
        "named": "never",
      },
    ],
    "space-in-parens": Array [
      "error",
      "never",
    ],
    "space-infix-ops": "error",
    "space-unary-ops": Array [
      "error",
      Object {
        "nonwords": false,
        "words": true,
      },
    ],
    "spaced-comment": Array [
      "error",
      "always",
      Object {
        "block": Object {
          "balanced": true,
          "exceptions": Array [
            "*",
          ],
          "markers": Array [
            "*package",
            "!",
            ",",
            ":",
            "::",
            "flow-include",
          ],
        },
        "line": Object {
          "markers": Array [
            "*package",
            "!",
            "/",
            ",",
            "=",
          ],
        },
      },
    ],
    "symbol-description": "error",
    "template-curly-spacing": Array [
      "error",
      "never",
    ],
    "template-tag-spacing": Array [
      "error",
      "never",
    ],
    "unicode-bom": Array [
      "error",
      "never",
    ],
    "unicorn/catch-error-name": Array [
      "error",
      Object {
        "name": "error",
      },
    ],
    "unicorn/error-message": "error",
    "unicorn/escape-case": "error",
    "unicorn/explicit-length-check": Array [
      "error",
      Object {
        "non-zero": "greater-than",
      },
    ],
    "unicorn/import-index": "error",
    "unicorn/no-for-loop": "error",
    "unicorn/no-unreadable-array-destructuring": "error",
    "unicorn/number-literal-case": "error",
    "unicorn/prefer-event-key": "error",
    "unicorn/throw-new-error": "error",
    "use-isnan": "error",
    "valid-typeof": Array [
      "error",
      Object {
        "requireStringLiterals": true,
      },
    ],
    "wrap-iife": Array [
      "error",
      "any",
      Object {
        "functionPrototypeMethods": true,
      },
    ],
    "yield-star-spacing": Array [
      "error",
      "after",
    ],
    "yoda": Array [
      "error",
      "never",
    ],
  },
}
`;

exports[`base generates the same package.json 1`] = `
Object {
  "devDependencies": Object {
    "babel-eslint": "^10.1.0",
    "eslint": "^7.24.0",
    "eslint-plugin-import": "^2.22.1",
    "eslint-plugin-levitate": "^3.8.6",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-promise": "^5.1.0",
    "eslint-plugin-unicorn": "^29.0.0",
  },
}
`;

exports[`base yields the same linting results 1`] = `
"base/new-line.js: line 6, col 6, Error - Missing trailing comma. (comma-dangle)
base/new-line.js: line 9, col 19, Error - Object properties must go on a new line. (object-property-newline)
base/new-line.js: line 27, col 4, Error - Expected a new line after this. (levitate/new-line-within-statement)
base/new-line.js: line 28, col 4, Error - Unexpected a new line before this. (levitate/new-line-within-statement)
base/new-line.js: line 28, col 11, Error - Expected a new line before this. (levitate/new-line-within-statement)
"
`;

exports[`jest generates the same ESLint configuration file 1`] = `
Object {
  "env": Object {
    "browser": true,
    "es2020": true,
    "node": true,
  },
  "extends": Array [],
  "globals": Object {
    "document": "readonly",
    "navigator": "readonly",
    "window": "readonly",
  },
  "overrides": Array [
    Object {
      "env": Object {
        "jest": true,
      },
      "files": Array [
        "**/*.test.{js,jsx,ts,tsx}",
      ],
      "rules": Object {
        "jest/consistent-test-it": Array [
          "error",
          Object {
            "fn": "it",
            "withinDescribe": "it",
          },
        ],
        "jest/no-alias-methods": "error",
        "jest/no-commented-out-tests": "error",
        "jest/no-disabled-tests": "error",
        "jest/no-duplicate-hooks": "error",
        "jest/no-export": "error",
        "jest/no-focused-tests": "error",
        "jest/no-identical-title": "error",
        "jest/no-jest-import": "error",
        "jest/no-test-return-statement": "warn",
        "jest/no-truthy-falsy": "warn",
        "jest/no-try-expect": "warn",
        "jest/prefer-to-be-null": "error",
        "jest/prefer-to-be-undefined": "error",
        "jest/prefer-to-contain": "error",
        "jest/valid-describe": "error",
        "jest/valid-expect": "error",
        "jest/valid-title": "error",
        "levitate/test-case-new-line": "error",
        "levitate/test-case-title": "error",
        "lodash/prefer-noop": "off",
      },
    },
  ],
  "parser": "babel-eslint",
  "parserOptions": Object {
    "ecmaVersion": 2020,
    "sourceType": "module",
  },
  "plugins": Array [
    "eslint-plugin-import",
    "eslint-plugin-jest",
    "eslint-plugin-levitate",
    "eslint-plugin-node",
    "eslint-plugin-promise",
    "eslint-plugin-unicorn",
  ],
  "rules": Object {
    "array-bracket-newline": Array [
      "error",
      "consistent",
    ],
    "array-bracket-spacing": Array [
      "error",
      "never",
    ],
    "array-element-newline": Array [
      "error",
      "consistent",
    ],
    "arrow-parens": Array [
      "error",
      "as-needed",
    ],
    "arrow-spacing": "error",
    "block-spacing": Array [
      "error",
      "always",
    ],
    "brace-style": "error",
    "camelcase": "warn",
    "comma-dangle": Array [
      "error",
      "always-multiline",
    ],
    "comma-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": false,
      },
    ],
    "comma-style": Array [
      "error",
      "last",
    ],
    "computed-property-spacing": Array [
      "error",
      "never",
    ],
    "consistent-return": "error",
    "constructor-super": "error",
    "curly": Array [
      "error",
      "all",
    ],
    "dot-location": Array [
      "error",
      "property",
    ],
    "dot-notation": Array [
      "error",
      Object {
        "allowKeywords": true,
      },
    ],
    "eol-last": Array [
      "error",
      "always",
    ],
    "eqeqeq": Array [
      "error",
      "always",
      Object {
        "null": "ignore",
      },
    ],
    "func-call-spacing": Array [
      "error",
      "never",
    ],
    "generator-star-spacing": Array [
      "error",
      "after",
    ],
    "import/export": "error",
    "import/first": "error",
    "import/named": "error",
    "import/no-absolute-path": Array [
      "error",
      Object {
        "amd": false,
        "commonjs": true,
        "esmodule": true,
      },
    ],
    "import/no-duplicates": "error",
    "import/no-named-default": "error",
    "import/no-useless-path-segments": "error",
    "indent": Array [
      "error",
      2,
      Object {
        "SwitchCase": 1,
      },
    ],
    "key-spacing": Array [
      "error",
      Object {
        "afterColon": true,
        "beforeColon": false,
      },
    ],
    "keyword-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": true,
      },
    ],
    "levitate/comment": "warn",
    "levitate/import-convention": Array [
      "error",
      Object {
        "default": "classNames",
        "path": "^classnames$",
      },
      Object {
        "default": true,
        "path": "^(?!\\\\.|\\\\/)",
      },
    ],
    "levitate/new-line-within-statement": Array [
      "error",
      Object {
        "maxLength": 80,
      },
    ],
    "levitate/sort-imports": Array [
      "error",
      "manta",
    ],
    "lines-between-class-members": Array [
      "error",
      "always",
      Object {
        "exceptAfterSingleLine": true,
      },
    ],
    "max-nested-callbacks": Array [
      "error",
      4,
    ],
    "max-statements-per-line": Array [
      "error",
      Object {
        "max": 1,
      },
    ],
    "new-cap": Array [
      "error",
      Object {
        "capIsNew": false,
        "newIsCap": true,
        "properties": true,
      },
    ],
    "new-parens": "error",
    "no-array-constructor": "error",
    "no-async-promise-executor": "error",
    "no-compare-neg-zero": "error",
    "no-cond-assign": "error",
    "no-confusing-arrow": "error",
    "no-constant-condition": Array [
      "error",
      Object {
        "checkLoops": false,
      },
    ],
    "no-control-regex": "error",
    "no-debugger": "error",
    "no-delete-var": "error",
    "no-dupe-args": "error",
    "no-dupe-class-members": "error",
    "no-dupe-keys": "error",
    "no-duplicate-case": "error",
    "no-else-return": "error",
    "no-empty": "error",
    "no-empty-character-class": "error",
    "no-empty-pattern": "error",
    "no-eval": "error",
    "no-ex-assign": "error",
    "no-extend-native": "error",
    "no-extra-bind": "error",
    "no-extra-boolean-cast": "error",
    "no-extra-parens": Array [
      "error",
      "functions",
    ],
    "no-fallthrough": "error",
    "no-func-assign": "error",
    "no-global-assign": "error",
    "no-implicit-coercion": Array [
      "error",
      Object {
        "allow": Array [
          "!!",
        ],
      },
    ],
    "no-implied-eval": "error",
    "no-inner-declarations": Array [
      "error",
      "functions",
    ],
    "no-invalid-regexp": "error",
    "no-irregular-whitespace": "error",
    "no-iterator": "error",
    "no-labels": Array [
      "error",
      Object {
        "allowLoop": false,
        "allowSwitch": false,
      },
    ],
    "no-lone-blocks": "error",
    "no-misleading-character-class": "error",
    "no-mixed-spaces-and-tabs": "error",
    "no-multi-spaces": "error",
    "no-multi-str": "error",
    "no-multiple-empty-lines": Array [
      "error",
      Object {
        "max": 1,
        "maxBOF": 0,
        "maxEOF": 1,
      },
    ],
    "no-nested-ternary": "error",
    "no-new": "error",
    "no-new-func": "error",
    "no-new-object": "error",
    "no-new-symbol": "error",
    "no-new-wrappers": "error",
    "no-obj-calls": "error",
    "no-octal": "error",
    "no-octal-escape": "error",
    "no-promise-executor-return": "error",
    "no-proto": "error",
    "no-prototype-builtins": "error",
    "no-redeclare": Array [
      "error",
      Object {
        "builtinGlobals": false,
      },
    ],
    "no-regex-spaces": "error",
    "no-return-assign": Array [
      "error",
      "except-parens",
    ],
    "no-return-await": "error",
    "no-self-assign": Array [
      "error",
      Object {
        "props": true,
      },
    ],
    "no-self-compare": "error",
    "no-sequences": "error",
    "no-shadow-restricted-names": "error",
    "no-sparse-arrays": "error",
    "no-template-curly-in-string": "warn",
    "no-this-before-super": "error",
    "no-throw-literal": "error",
    "no-trailing-spaces": "error",
    "no-undef": "error",
    "no-undef-init": "error",
    "no-unexpected-multiline": "error",
    "no-unmodified-loop-condition": "error",
    "no-unneeded-ternary": Array [
      "error",
      Object {
        "defaultAssignment": false,
      },
    ],
    "no-unreachable": "error",
    "no-unsafe-finally": "error",
    "no-unsafe-negation": "error",
    "no-unused-expressions": Array [
      "error",
      Object {
        "allowShortCircuit": true,
        "allowTaggedTemplates": true,
        "allowTernary": true,
      },
    ],
    "no-unused-vars": Array [
      "error",
      Object {
        "args": "none",
        "ignoreRestSiblings": true,
        "vars": "all",
      },
    ],
    "no-use-before-define": Array [
      "error",
      Object {
        "classes": false,
        "functions": false,
        "variables": false,
      },
    ],
    "no-useless-call": "error",
    "no-useless-catch": "error",
    "no-useless-computed-key": "error",
    "no-useless-concat": "error",
    "no-useless-rename": "error",
    "no-useless-return": "error",
    "no-var": "error",
    "no-whitespace-before-property": "error",
    "no-with": "error",
    "node/handle-callback-err": Array [
      "error",
      "error",
    ],
    "node/no-deprecated-api": "warn",
    "node/no-new-require": "error",
    "node/no-path-concat": "error",
    "node/process-exit-as-throw": "error",
    "object-curly-newline": Array [
      "error",
      Object {
        "ExportDeclaration": Object {
          "consistent": true,
          "multiline": true,
        },
        "ImportDeclaration": "never",
        "ObjectExpression": Object {
          "consistent": true,
          "multiline": true,
        },
        "ObjectPattern": "never",
      },
    ],
    "object-curly-spacing": Array [
      "error",
      "always",
    ],
    "object-property-newline": "error",
    "object-shorthand": Array [
      "error",
      "properties",
    ],
    "operator-linebreak": Array [
      "error",
      "after",
      Object {
        "overrides": Object {
          ":": "before",
          "?": "before",
          "|>": "before",
        },
      },
    ],
    "padding-line-between-statements": Array [
      "error",
      Object {
        "blankLine": "always",
        "next": "*",
        "prev": "directive",
      },
      Object {
        "blankLine": "always",
        "next": "block-like",
        "prev": "*",
      },
      Object {
        "blankLine": "never",
        "next": "block-like",
        "prev": Array [
          "singleline-const",
          "singleline-let",
          "singleline-var",
        ],
      },
      Object {
        "blankLine": "never",
        "next": "case",
        "prev": "case",
      },
      Object {
        "blankLine": "always",
        "next": "*",
        "prev": "block-like",
      },
      Object {
        "blankLine": "always",
        "next": Array [
          "function",
          "try",
        ],
        "prev": "*",
      },
      Object {
        "blankLine": "always",
        "next": Array [
          "const",
          "let",
          "var",
          "export",
          "cjs-export",
          "return",
          "throw",
          "break",
          "continue",
        ],
        "prev": "expression",
      },
    ],
    "prefer-arrow-callback": "error",
    "prefer-const": "error",
    "prefer-promise-reject-errors": "error",
    "promise/param-names": "error",
    "quote-props": Array [
      "error",
      "as-needed",
    ],
    "quotes": Array [
      "error",
      "single",
    ],
    "rest-spread-spacing": Array [
      "error",
      "never",
    ],
    "semi": Array [
      "error",
      "never",
    ],
    "semi-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": false,
      },
    ],
    "space-before-blocks": Array [
      "error",
      "always",
    ],
    "space-before-function-paren": Array [
      "error",
      Object {
        "anonymous": "never",
        "asyncArrow": "always",
        "named": "never",
      },
    ],
    "space-in-parens": Array [
      "error",
      "never",
    ],
    "space-infix-ops": "error",
    "space-unary-ops": Array [
      "error",
      Object {
        "nonwords": false,
        "words": true,
      },
    ],
    "spaced-comment": Array [
      "error",
      "always",
      Object {
        "block": Object {
          "balanced": true,
          "exceptions": Array [
            "*",
          ],
          "markers": Array [
            "*package",
            "!",
            ",",
            ":",
            "::",
            "flow-include",
          ],
        },
        "line": Object {
          "markers": Array [
            "*package",
            "!",
            "/",
            ",",
            "=",
          ],
        },
      },
    ],
    "symbol-description": "error",
    "template-curly-spacing": Array [
      "error",
      "never",
    ],
    "template-tag-spacing": Array [
      "error",
      "never",
    ],
    "unicode-bom": Array [
      "error",
      "never",
    ],
    "unicorn/catch-error-name": Array [
      "error",
      Object {
        "name": "error",
      },
    ],
    "unicorn/error-message": "error",
    "unicorn/escape-case": "error",
    "unicorn/explicit-length-check": Array [
      "error",
      Object {
        "non-zero": "greater-than",
      },
    ],
    "unicorn/import-index": "error",
    "unicorn/no-for-loop": "error",
    "unicorn/no-unreadable-array-destructuring": "error",
    "unicorn/number-literal-case": "error",
    "unicorn/prefer-event-key": "error",
    "unicorn/throw-new-error": "error",
    "use-isnan": "error",
    "valid-typeof": Array [
      "error",
      Object {
        "requireStringLiterals": true,
      },
    ],
    "wrap-iife": Array [
      "error",
      "any",
      Object {
        "functionPrototypeMethods": true,
      },
    ],
    "yield-star-spacing": Array [
      "error",
      "after",
    ],
    "yoda": Array [
      "error",
      "never",
    ],
  },
}
`;

exports[`jest generates the same package.json 1`] = `
Object {
  "dependencies": Object {
    "jest": "^3.6.0",
  },
  "devDependencies": Object {
    "babel-eslint": "^10.1.0",
    "eslint": "^7.24.0",
    "eslint-plugin-import": "^2.22.1",
    "eslint-plugin-jest": "^24.3.5",
    "eslint-plugin-levitate": "^3.10.4",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-promise": "^5.1.0",
    "eslint-plugin-unicorn": "^29.0.0",
  },
}
`;

exports[`jest yields the same linting results 1`] = `
"jest/main.test.js: line 2, col 6, Error - Expected the test case title to start with \\"(does not) return/render/call/fetch/set/throw(s) ... (, given ...)\\" only (levitate/test-case-title)
jest/main.test.js: line 5, col 3, Error - Expected to have a new line before this (levitate/test-case-new-line)
jest/main.test.js: line 5, col 6, Error - Expected the test case title to start with \\"(does not) return/render/call/fetch/set/throw(s) ... (, given ...)\\" only (levitate/test-case-title)
"
`;

exports[`jquery generates the same ESLint configuration file 1`] = `
Object {
  "env": Object {
    "browser": true,
    "es2020": true,
    "jquery": true,
    "node": true,
  },
  "extends": Array [],
  "globals": Object {
    "document": "readonly",
    "navigator": "readonly",
    "window": "readonly",
  },
  "parser": "babel-eslint",
  "parserOptions": Object {
    "ecmaVersion": 2020,
    "sourceType": "module",
  },
  "plugins": Array [
    "eslint-plugin-import",
    "eslint-plugin-levitate",
    "eslint-plugin-node",
    "eslint-plugin-promise",
    "eslint-plugin-unicorn",
  ],
  "rules": Object {
    "array-bracket-newline": Array [
      "error",
      "consistent",
    ],
    "array-bracket-spacing": Array [
      "error",
      "never",
    ],
    "array-element-newline": Array [
      "error",
      "consistent",
    ],
    "arrow-parens": Array [
      "error",
      "as-needed",
    ],
    "arrow-spacing": "error",
    "block-spacing": Array [
      "error",
      "always",
    ],
    "brace-style": "error",
    "camelcase": "warn",
    "comma-dangle": Array [
      "error",
      "always-multiline",
    ],
    "comma-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": false,
      },
    ],
    "comma-style": Array [
      "error",
      "last",
    ],
    "computed-property-spacing": Array [
      "error",
      "never",
    ],
    "consistent-return": "error",
    "constructor-super": "error",
    "curly": Array [
      "error",
      "all",
    ],
    "dot-location": Array [
      "error",
      "property",
    ],
    "dot-notation": Array [
      "error",
      Object {
        "allowKeywords": true,
      },
    ],
    "eol-last": Array [
      "error",
      "always",
    ],
    "eqeqeq": Array [
      "error",
      "always",
      Object {
        "null": "ignore",
      },
    ],
    "func-call-spacing": Array [
      "error",
      "never",
    ],
    "generator-star-spacing": Array [
      "error",
      "after",
    ],
    "import/export": "error",
    "import/first": "error",
    "import/named": "error",
    "import/no-absolute-path": Array [
      "error",
      Object {
        "amd": false,
        "commonjs": true,
        "esmodule": true,
      },
    ],
    "import/no-duplicates": "error",
    "import/no-named-default": "error",
    "import/no-useless-path-segments": "error",
    "indent": Array [
      "error",
      2,
      Object {
        "SwitchCase": 1,
      },
    ],
    "key-spacing": Array [
      "error",
      Object {
        "afterColon": true,
        "beforeColon": false,
      },
    ],
    "keyword-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": true,
      },
    ],
    "levitate/comment": "warn",
    "levitate/import-convention": Array [
      "error",
      Object {
        "default": "$",
        "path": "^jquery$",
      },
      Object {
        "default": "classNames",
        "path": "^classnames$",
      },
      Object {
        "default": true,
        "path": "^(?!\\\\.|\\\\/)",
      },
    ],
    "levitate/new-line-within-statement": Array [
      "error",
      Object {
        "maxLength": 80,
      },
    ],
    "levitate/sort-imports": Array [
      "error",
      "manta",
    ],
    "lines-between-class-members": Array [
      "error",
      "always",
      Object {
        "exceptAfterSingleLine": true,
      },
    ],
    "max-nested-callbacks": Array [
      "error",
      4,
    ],
    "max-statements-per-line": Array [
      "error",
      Object {
        "max": 1,
      },
    ],
    "new-cap": Array [
      "error",
      Object {
        "capIsNew": false,
        "newIsCap": true,
        "properties": true,
      },
    ],
    "new-parens": "error",
    "no-array-constructor": "error",
    "no-async-promise-executor": "error",
    "no-compare-neg-zero": "error",
    "no-cond-assign": "error",
    "no-confusing-arrow": "error",
    "no-constant-condition": Array [
      "error",
      Object {
        "checkLoops": false,
      },
    ],
    "no-control-regex": "error",
    "no-debugger": "error",
    "no-delete-var": "error",
    "no-dupe-args": "error",
    "no-dupe-class-members": "error",
    "no-dupe-keys": "error",
    "no-duplicate-case": "error",
    "no-else-return": "error",
    "no-empty": "error",
    "no-empty-character-class": "error",
    "no-empty-pattern": "error",
    "no-eval": "error",
    "no-ex-assign": "error",
    "no-extend-native": "error",
    "no-extra-bind": "error",
    "no-extra-boolean-cast": "error",
    "no-extra-parens": Array [
      "error",
      "functions",
    ],
    "no-fallthrough": "error",
    "no-func-assign": "error",
    "no-global-assign": "error",
    "no-implicit-coercion": Array [
      "error",
      Object {
        "allow": Array [
          "!!",
        ],
      },
    ],
    "no-implied-eval": "error",
    "no-inner-declarations": Array [
      "error",
      "functions",
    ],
    "no-invalid-regexp": "error",
    "no-irregular-whitespace": "error",
    "no-iterator": "error",
    "no-labels": Array [
      "error",
      Object {
        "allowLoop": false,
        "allowSwitch": false,
      },
    ],
    "no-lone-blocks": "error",
    "no-misleading-character-class": "error",
    "no-mixed-spaces-and-tabs": "error",
    "no-multi-spaces": "error",
    "no-multi-str": "error",
    "no-multiple-empty-lines": Array [
      "error",
      Object {
        "max": 1,
        "maxBOF": 0,
        "maxEOF": 1,
      },
    ],
    "no-nested-ternary": "error",
    "no-new": "error",
    "no-new-func": "error",
    "no-new-object": "error",
    "no-new-symbol": "error",
    "no-new-wrappers": "error",
    "no-obj-calls": "error",
    "no-octal": "error",
    "no-octal-escape": "error",
    "no-promise-executor-return": "error",
    "no-proto": "error",
    "no-prototype-builtins": "error",
    "no-redeclare": Array [
      "error",
      Object {
        "builtinGlobals": false,
      },
    ],
    "no-regex-spaces": "error",
    "no-return-assign": Array [
      "error",
      "except-parens",
    ],
    "no-return-await": "error",
    "no-self-assign": Array [
      "error",
      Object {
        "props": true,
      },
    ],
    "no-self-compare": "error",
    "no-sequences": "error",
    "no-shadow-restricted-names": "error",
    "no-sparse-arrays": "error",
    "no-template-curly-in-string": "warn",
    "no-this-before-super": "error",
    "no-throw-literal": "error",
    "no-trailing-spaces": "error",
    "no-undef": "error",
    "no-undef-init": "error",
    "no-unexpected-multiline": "error",
    "no-unmodified-loop-condition": "error",
    "no-unneeded-ternary": Array [
      "error",
      Object {
        "defaultAssignment": false,
      },
    ],
    "no-unreachable": "error",
    "no-unsafe-finally": "error",
    "no-unsafe-negation": "error",
    "no-unused-expressions": Array [
      "error",
      Object {
        "allowShortCircuit": true,
        "allowTaggedTemplates": true,
        "allowTernary": true,
      },
    ],
    "no-unused-vars": Array [
      "error",
      Object {
        "args": "none",
        "ignoreRestSiblings": true,
        "vars": "all",
      },
    ],
    "no-use-before-define": Array [
      "error",
      Object {
        "classes": false,
        "functions": false,
        "variables": false,
      },
    ],
    "no-useless-call": "error",
    "no-useless-catch": "error",
    "no-useless-computed-key": "error",
    "no-useless-concat": "error",
    "no-useless-rename": "error",
    "no-useless-return": "error",
    "no-var": "error",
    "no-whitespace-before-property": "error",
    "no-with": "error",
    "node/handle-callback-err": Array [
      "error",
      "error",
    ],
    "node/no-deprecated-api": "warn",
    "node/no-new-require": "error",
    "node/no-path-concat": "error",
    "node/process-exit-as-throw": "error",
    "object-curly-newline": Array [
      "error",
      Object {
        "ExportDeclaration": Object {
          "consistent": true,
          "multiline": true,
        },
        "ImportDeclaration": "never",
        "ObjectExpression": Object {
          "consistent": true,
          "multiline": true,
        },
        "ObjectPattern": "never",
      },
    ],
    "object-curly-spacing": Array [
      "error",
      "always",
    ],
    "object-property-newline": "error",
    "object-shorthand": Array [
      "error",
      "properties",
    ],
    "operator-linebreak": Array [
      "error",
      "after",
      Object {
        "overrides": Object {
          ":": "before",
          "?": "before",
          "|>": "before",
        },
      },
    ],
    "padding-line-between-statements": Array [
      "error",
      Object {
        "blankLine": "always",
        "next": "*",
        "prev": "directive",
      },
      Object {
        "blankLine": "always",
        "next": "block-like",
        "prev": "*",
      },
      Object {
        "blankLine": "never",
        "next": "block-like",
        "prev": Array [
          "singleline-const",
          "singleline-let",
          "singleline-var",
        ],
      },
      Object {
        "blankLine": "never",
        "next": "case",
        "prev": "case",
      },
      Object {
        "blankLine": "always",
        "next": "*",
        "prev": "block-like",
      },
      Object {
        "blankLine": "always",
        "next": Array [
          "function",
          "try",
        ],
        "prev": "*",
      },
      Object {
        "blankLine": "always",
        "next": Array [
          "const",
          "let",
          "var",
          "export",
          "cjs-export",
          "return",
          "throw",
          "break",
          "continue",
        ],
        "prev": "expression",
      },
    ],
    "prefer-arrow-callback": "error",
    "prefer-const": "error",
    "prefer-promise-reject-errors": "error",
    "promise/param-names": "error",
    "quote-props": Array [
      "error",
      "as-needed",
    ],
    "quotes": Array [
      "error",
      "single",
    ],
    "rest-spread-spacing": Array [
      "error",
      "never",
    ],
    "semi": Array [
      "error",
      "never",
    ],
    "semi-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": false,
      },
    ],
    "space-before-blocks": Array [
      "error",
      "always",
    ],
    "space-before-function-paren": Array [
      "error",
      Object {
        "anonymous": "never",
        "asyncArrow": "always",
        "named": "never",
      },
    ],
    "space-in-parens": Array [
      "error",
      "never",
    ],
    "space-infix-ops": "error",
    "space-unary-ops": Array [
      "error",
      Object {
        "nonwords": false,
        "words": true,
      },
    ],
    "spaced-comment": Array [
      "error",
      "always",
      Object {
        "block": Object {
          "balanced": true,
          "exceptions": Array [
            "*",
          ],
          "markers": Array [
            "*package",
            "!",
            ",",
            ":",
            "::",
            "flow-include",
          ],
        },
        "line": Object {
          "markers": Array [
            "*package",
            "!",
            "/",
            ",",
            "=",
          ],
        },
      },
    ],
    "symbol-description": "error",
    "template-curly-spacing": Array [
      "error",
      "never",
    ],
    "template-tag-spacing": Array [
      "error",
      "never",
    ],
    "unicode-bom": Array [
      "error",
      "never",
    ],
    "unicorn/catch-error-name": Array [
      "error",
      Object {
        "name": "error",
      },
    ],
    "unicorn/error-message": "error",
    "unicorn/escape-case": "error",
    "unicorn/explicit-length-check": Array [
      "error",
      Object {
        "non-zero": "greater-than",
      },
    ],
    "unicorn/import-index": "error",
    "unicorn/no-for-loop": "error",
    "unicorn/no-unreadable-array-destructuring": "error",
    "unicorn/number-literal-case": "error",
    "unicorn/prefer-event-key": "error",
    "unicorn/throw-new-error": "error",
    "use-isnan": "error",
    "valid-typeof": Array [
      "error",
      Object {
        "requireStringLiterals": true,
      },
    ],
    "wrap-iife": Array [
      "error",
      "any",
      Object {
        "functionPrototypeMethods": true,
      },
    ],
    "yield-star-spacing": Array [
      "error",
      "after",
    ],
    "yoda": Array [
      "error",
      "never",
    ],
  },
}
`;

exports[`jquery generates the same package.json 1`] = `
Object {
  "dependencies": Object {
    "jquery": "^3.6.0",
  },
  "devDependencies": Object {
    "babel-eslint": "^10.1.0",
    "eslint": "^7.24.0",
    "eslint-plugin-import": "^2.22.1",
    "eslint-plugin-levitate": "^3.8.6",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-promise": "^5.1.0",
    "eslint-plugin-unicorn": "^29.0.0",
  },
}
`;

exports[`jquery yields the same linting results 1`] = `
"jquery/main.js: line 1, col 8, Error - Expected the default import to be \\"$\\". (levitate/import-convention)
jquery/main.js: line 1, col 8, Error - 'x' is defined but never used. (no-unused-vars)
"
`;

exports[`react generates the same ESLint configuration file 1`] = `
Object {
  "env": Object {
    "browser": true,
    "es2020": true,
    "node": true,
  },
  "extends": Array [],
  "globals": Object {
    "document": "readonly",
    "navigator": "readonly",
    "window": "readonly",
  },
  "parser": "babel-eslint",
  "parserOptions": Object {
    "ecmaFeatures": Object {
      "jsx": true,
    },
    "ecmaVersion": 2020,
    "sourceType": "module",
  },
  "plugins": Array [
    "eslint-plugin-import",
    "eslint-plugin-levitate",
    "eslint-plugin-node",
    "eslint-plugin-promise",
    "eslint-plugin-react",
    "eslint-plugin-react-hooks",
    "eslint-plugin-unicorn",
  ],
  "rules": Object {
    "array-bracket-newline": Array [
      "error",
      "consistent",
    ],
    "array-bracket-spacing": Array [
      "error",
      "never",
    ],
    "array-element-newline": Array [
      "error",
      "consistent",
    ],
    "arrow-parens": Array [
      "error",
      "as-needed",
    ],
    "arrow-spacing": "error",
    "block-spacing": Array [
      "error",
      "always",
    ],
    "brace-style": "error",
    "camelcase": "warn",
    "comma-dangle": Array [
      "error",
      "always-multiline",
    ],
    "comma-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": false,
      },
    ],
    "comma-style": Array [
      "error",
      "last",
    ],
    "computed-property-spacing": Array [
      "error",
      "never",
    ],
    "consistent-return": "error",
    "constructor-super": "error",
    "curly": Array [
      "error",
      "all",
    ],
    "dot-location": Array [
      "error",
      "property",
    ],
    "dot-notation": Array [
      "error",
      Object {
        "allowKeywords": true,
      },
    ],
    "eol-last": Array [
      "error",
      "always",
    ],
    "eqeqeq": Array [
      "error",
      "always",
      Object {
        "null": "ignore",
      },
    ],
    "func-call-spacing": Array [
      "error",
      "never",
    ],
    "generator-star-spacing": Array [
      "error",
      "after",
    ],
    "import/export": "error",
    "import/first": "error",
    "import/named": "error",
    "import/no-absolute-path": Array [
      "error",
      Object {
        "amd": false,
        "commonjs": true,
        "esmodule": true,
      },
    ],
    "import/no-duplicates": "error",
    "import/no-named-default": "error",
    "import/no-useless-path-segments": "error",
    "indent": Array [
      "error",
      2,
      Object {
        "SwitchCase": 1,
      },
    ],
    "jsx-quotes": Array [
      "error",
      "prefer-double",
    ],
    "key-spacing": Array [
      "error",
      Object {
        "afterColon": true,
        "beforeColon": false,
      },
    ],
    "keyword-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": true,
      },
    ],
    "levitate/comment": "warn",
    "levitate/import-convention": Array [
      "error",
      Object {
        "default": "React",
        "named": Array [
          Object {
            "name": "^use[A-Z].*",
          },
        ],
        "path": "^react$",
      },
      Object {
        "default": true,
        "named": false,
        "path": "^react-.*",
      },
      Object {
        "default": "classNames",
        "path": "^classnames$",
      },
      Object {
        "default": true,
        "path": "^(?!\\\\.|\\\\/)",
      },
    ],
    "levitate/new-line-within-statement": Array [
      "error",
      Object {
        "maxLength": 80,
      },
    ],
    "levitate/sort-imports": Array [
      "error",
      "manta",
    ],
    "lines-between-class-members": Array [
      "error",
      "always",
      Object {
        "exceptAfterSingleLine": true,
      },
    ],
    "max-nested-callbacks": Array [
      "error",
      4,
    ],
    "max-statements-per-line": Array [
      "error",
      Object {
        "max": 1,
      },
    ],
    "new-cap": Array [
      "error",
      Object {
        "capIsNew": false,
        "newIsCap": true,
        "properties": true,
      },
    ],
    "new-parens": "error",
    "no-array-constructor": "error",
    "no-async-promise-executor": "error",
    "no-compare-neg-zero": "error",
    "no-cond-assign": "error",
    "no-confusing-arrow": "error",
    "no-constant-condition": Array [
      "error",
      Object {
        "checkLoops": false,
      },
    ],
    "no-control-regex": "error",
    "no-debugger": "error",
    "no-delete-var": "error",
    "no-dupe-args": "error",
    "no-dupe-class-members": "error",
    "no-dupe-keys": "error",
    "no-duplicate-case": "error",
    "no-else-return": "error",
    "no-empty": "error",
    "no-empty-character-class": "error",
    "no-empty-pattern": "error",
    "no-eval": "error",
    "no-ex-assign": "error",
    "no-extend-native": "error",
    "no-extra-bind": "error",
    "no-extra-boolean-cast": "error",
    "no-extra-parens": Array [
      "error",
      "functions",
    ],
    "no-fallthrough": "error",
    "no-func-assign": "error",
    "no-global-assign": "error",
    "no-implicit-coercion": Array [
      "error",
      Object {
        "allow": Array [
          "!!",
        ],
      },
    ],
    "no-implied-eval": "error",
    "no-inner-declarations": Array [
      "error",
      "functions",
    ],
    "no-invalid-regexp": "error",
    "no-irregular-whitespace": "error",
    "no-iterator": "error",
    "no-labels": Array [
      "error",
      Object {
        "allowLoop": false,
        "allowSwitch": false,
      },
    ],
    "no-lone-blocks": "error",
    "no-misleading-character-class": "error",
    "no-mixed-spaces-and-tabs": "error",
    "no-multi-spaces": "error",
    "no-multi-str": "error",
    "no-multiple-empty-lines": Array [
      "error",
      Object {
        "max": 1,
        "maxBOF": 0,
        "maxEOF": 1,
      },
    ],
    "no-nested-ternary": "error",
    "no-new": "error",
    "no-new-func": "error",
    "no-new-object": "error",
    "no-new-symbol": "error",
    "no-new-wrappers": "error",
    "no-obj-calls": "error",
    "no-octal": "error",
    "no-octal-escape": "error",
    "no-promise-executor-return": "error",
    "no-proto": "error",
    "no-prototype-builtins": "error",
    "no-redeclare": Array [
      "error",
      Object {
        "builtinGlobals": false,
      },
    ],
    "no-regex-spaces": "error",
    "no-return-assign": Array [
      "error",
      "except-parens",
    ],
    "no-return-await": "error",
    "no-self-assign": Array [
      "error",
      Object {
        "props": true,
      },
    ],
    "no-self-compare": "error",
    "no-sequences": "error",
    "no-shadow-restricted-names": "error",
    "no-sparse-arrays": "error",
    "no-template-curly-in-string": "warn",
    "no-this-before-super": "error",
    "no-throw-literal": "error",
    "no-trailing-spaces": "error",
    "no-undef": "error",
    "no-undef-init": "error",
    "no-unexpected-multiline": "error",
    "no-unmodified-loop-condition": "error",
    "no-unneeded-ternary": Array [
      "error",
      Object {
        "defaultAssignment": false,
      },
    ],
    "no-unreachable": "error",
    "no-unsafe-finally": "error",
    "no-unsafe-negation": "error",
    "no-unused-expressions": Array [
      "error",
      Object {
        "allowShortCircuit": true,
        "allowTaggedTemplates": true,
        "allowTernary": true,
      },
    ],
    "no-unused-vars": Array [
      "error",
      Object {
        "args": "none",
        "ignoreRestSiblings": true,
        "vars": "all",
      },
    ],
    "no-use-before-define": Array [
      "error",
      Object {
        "classes": false,
        "functions": false,
        "variables": false,
      },
    ],
    "no-useless-call": "error",
    "no-useless-catch": "error",
    "no-useless-computed-key": "error",
    "no-useless-concat": "error",
    "no-useless-rename": "error",
    "no-useless-return": "error",
    "no-var": "error",
    "no-whitespace-before-property": "error",
    "no-with": "error",
    "node/handle-callback-err": Array [
      "error",
      "error",
    ],
    "node/no-deprecated-api": "warn",
    "node/no-new-require": "error",
    "node/no-path-concat": "error",
    "node/process-exit-as-throw": "error",
    "object-curly-newline": Array [
      "error",
      Object {
        "ExportDeclaration": Object {
          "consistent": true,
          "multiline": true,
        },
        "ImportDeclaration": "never",
        "ObjectExpression": Object {
          "consistent": true,
          "multiline": true,
        },
        "ObjectPattern": "never",
      },
    ],
    "object-curly-spacing": Array [
      "error",
      "always",
    ],
    "object-property-newline": "error",
    "object-shorthand": Array [
      "error",
      "properties",
    ],
    "operator-linebreak": Array [
      "error",
      "after",
      Object {
        "overrides": Object {
          ":": "before",
          "?": "before",
          "|>": "before",
        },
      },
    ],
    "padding-line-between-statements": Array [
      "error",
      Object {
        "blankLine": "always",
        "next": "*",
        "prev": "directive",
      },
      Object {
        "blankLine": "always",
        "next": "block-like",
        "prev": "*",
      },
      Object {
        "blankLine": "never",
        "next": "block-like",
        "prev": Array [
          "singleline-const",
          "singleline-let",
          "singleline-var",
        ],
      },
      Object {
        "blankLine": "never",
        "next": "case",
        "prev": "case",
      },
      Object {
        "blankLine": "always",
        "next": "*",
        "prev": "block-like",
      },
      Object {
        "blankLine": "always",
        "next": Array [
          "function",
          "try",
        ],
        "prev": "*",
      },
      Object {
        "blankLine": "always",
        "next": Array [
          "const",
          "let",
          "var",
          "export",
          "cjs-export",
          "return",
          "throw",
          "break",
          "continue",
        ],
        "prev": "expression",
      },
    ],
    "prefer-arrow-callback": "error",
    "prefer-const": "error",
    "prefer-promise-reject-errors": "error",
    "promise/param-names": "error",
    "quote-props": Array [
      "error",
      "as-needed",
    ],
    "quotes": Array [
      "error",
      "single",
    ],
    "react-hooks/exhaustive-deps": "warn",
    "react-hooks/rules-of-hooks": "error",
    "react/destructuring-assignment": Array [
      "warn",
      "never",
    ],
    "react/forbid-foreign-prop-types": "error",
    "react/forbid-prop-types": Array [
      "error",
      Object {
        "forbid": Array [
          "any",
        ],
      },
    ],
    "react/jsx-boolean-value": "error",
    "react/jsx-closing-bracket-location": Array [
      "error",
      "tag-aligned",
    ],
    "react/jsx-closing-tag-location": "error",
    "react/jsx-curly-brace-presence": Array [
      "error",
      Object {
        "children": "never",
        "props": "never",
      },
    ],
    "react/jsx-curly-newline": Array [
      "error",
      Object {
        "multiline": "consistent",
        "singleline": "consistent",
      },
    ],
    "react/jsx-curly-spacing": Array [
      "error",
      Object {
        "allowMultiline": true,
        "attributes": Object {
          "when": "never",
        },
        "children": Object {
          "when": "never",
        },
      },
    ],
    "react/jsx-equals-spacing": Array [
      "error",
      "never",
    ],
    "react/jsx-first-prop-new-line": Array [
      "error",
      "multiline",
    ],
    "react/jsx-fragments": Array [
      "error",
      "element",
    ],
    "react/jsx-indent": Array [
      "error",
      2,
      Object {
        "checkAttributes": true,
        "indentLogicalExpressions": true,
      },
    ],
    "react/jsx-indent-props": Array [
      "error",
      2,
    ],
    "react/jsx-key": "error",
    "react/jsx-max-props-per-line": Array [
      "error",
      Object {
        "maximum": 1,
        "when": "multiline",
      },
    ],
    "react/jsx-no-duplicate-props": "error",
    "react/jsx-no-target-blank": Array [
      "error",
      Object {
        "enforceDynamicLinks": "always",
      },
    ],
    "react/jsx-no-undef": "error",
    "react/jsx-pascal-case": Array [
      "error",
      Object {
        "allowAllCaps": false,
      },
    ],
    "react/jsx-props-no-multi-spaces": "error",
    "react/jsx-sort-props": Array [
      "error",
      Object {
        "callbacksLast": true,
        "ignoreCase": true,
        "noSortAlphabetically": true,
        "reservedFirst": Array [
          "key",
          "ref",
        ],
      },
    ],
    "react/jsx-tag-spacing": Array [
      "error",
      Object {
        "afterOpening": "never",
        "beforeClosing": "never",
        "beforeSelfClosing": "always",
        "closingSlash": "never",
      },
    ],
    "react/jsx-uses-react": "error",
    "react/jsx-uses-vars": "error",
    "react/jsx-wrap-multilines": Array [
      "error",
      Object {
        "arrow": "parens-new-line",
        "assignment": "parens-new-line",
        "condition": "parens-new-line",
        "declaration": "parens-new-line",
        "logical": "parens-new-line",
        "prop": "parens-new-line",
        "return": "parens-new-line",
      },
    ],
    "react/no-access-state-in-setstate": "error",
    "react/no-children-prop": "error",
    "react/no-danger-with-children": "error",
    "react/no-deprecated": "warn",
    "react/no-direct-mutation-state": "error",
    "react/no-redundant-should-component-update": "error",
    "react/no-string-refs": "error",
    "react/no-typos": "error",
    "react/react-in-jsx-scope": "error",
    "react/require-render-return": "error",
    "react/self-closing-comp": "error",
    "react/sort-comp": Array [
      "error",
      Object {
        "order": Array [
          "constructor",
          "lifecycle",
          "everything-else",
          "/^on.+$/",
          "/^render.+$/",
          "render",
        ],
      },
    ],
    "rest-spread-spacing": Array [
      "error",
      "never",
    ],
    "semi": Array [
      "error",
      "never",
    ],
    "semi-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": false,
      },
    ],
    "space-before-blocks": Array [
      "error",
      "always",
    ],
    "space-before-function-paren": Array [
      "error",
      Object {
        "anonymous": "never",
        "asyncArrow": "always",
        "named": "never",
      },
    ],
    "space-in-parens": Array [
      "error",
      "never",
    ],
    "space-infix-ops": "error",
    "space-unary-ops": Array [
      "error",
      Object {
        "nonwords": false,
        "words": true,
      },
    ],
    "spaced-comment": Array [
      "error",
      "always",
      Object {
        "block": Object {
          "balanced": true,
          "exceptions": Array [
            "*",
          ],
          "markers": Array [
            "*package",
            "!",
            ",",
            ":",
            "::",
            "flow-include",
          ],
        },
        "line": Object {
          "markers": Array [
            "*package",
            "!",
            "/",
            ",",
            "=",
          ],
        },
      },
    ],
    "symbol-description": "error",
    "template-curly-spacing": Array [
      "error",
      "never",
    ],
    "template-tag-spacing": Array [
      "error",
      "never",
    ],
    "unicode-bom": Array [
      "error",
      "never",
    ],
    "unicorn/catch-error-name": Array [
      "error",
      Object {
        "name": "error",
      },
    ],
    "unicorn/error-message": "error",
    "unicorn/escape-case": "error",
    "unicorn/explicit-length-check": Array [
      "error",
      Object {
        "non-zero": "greater-than",
      },
    ],
    "unicorn/import-index": "error",
    "unicorn/no-for-loop": "error",
    "unicorn/no-unreadable-array-destructuring": "error",
    "unicorn/number-literal-case": "error",
    "unicorn/prefer-event-key": "error",
    "unicorn/throw-new-error": "error",
    "use-isnan": "error",
    "valid-typeof": Array [
      "error",
      Object {
        "requireStringLiterals": true,
      },
    ],
    "wrap-iife": Array [
      "error",
      "any",
      Object {
        "functionPrototypeMethods": true,
      },
    ],
    "yield-star-spacing": Array [
      "error",
      "after",
    ],
    "yoda": Array [
      "error",
      "never",
    ],
  },
  "settings": Object {
    "react": Object {
      "pragma": "React",
      "version": "detect",
    },
  },
}
`;

exports[`react generates the same package.json 1`] = `
Object {
  "dependencies": Object {
    "react": "17.0.2",
  },
  "devDependencies": Object {
    "babel-eslint": "^10.1.0",
    "eslint": "^7.24.0",
    "eslint-plugin-import": "^2.22.1",
    "eslint-plugin-levitate": "^3.8.6",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-promise": "^5.1.0",
    "eslint-plugin-react": "^7.23.2",
    "eslint-plugin-react-hooks": "^4.2.0",
    "eslint-plugin-unicorn": "^29.0.0",
  },
}
`;

exports[`react yields the same linting results 1`] = `
"react/MyComponent.js: line 4, col 10, Error - Empty components are self-closing (react/self-closing-comp)
"
`;

exports[`ts generates the same ESLint configuration file 1`] = `
Object {
  "env": Object {
    "browser": true,
    "es2020": true,
    "node": true,
  },
  "extends": Array [],
  "globals": Object {
    "document": "readonly",
    "navigator": "readonly",
    "window": "readonly",
  },
  "overrides": Array [
    Object {
      "files": Array [
        "**/*.{ts,tsx}",
      ],
      "rules": Object {
        "@typescript-eslint/adjacent-overload-signatures": "error",
        "@typescript-eslint/array-type": Array [
          "error",
          Object {
            "default": "generic",
          },
        ],
        "@typescript-eslint/brace-style": "error",
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/func-call-spacing": Array [
          "error",
          "never",
        ],
        "@typescript-eslint/indent": Array [
          "error",
          2,
          Object {
            "SwitchCase": 1,
          },
        ],
        "@typescript-eslint/member-delimiter-style": Array [
          "error",
          Object {
            "multiline": Object {
              "delimiter": "none",
              "requireLast": true,
            },
            "singleline": Object {
              "delimiter": "comma",
              "requireLast": false,
            },
          },
        ],
        "@typescript-eslint/naming-convention": Array [
          "warn",
          Object {
            "format": Array [
              "camelCase",
            ],
            "selector": "default",
          },
          Object {
            "format": Array [
              "camelCase",
              "PascalCase",
              "UPPER_CASE",
            ],
            "selector": "variable",
          },
          Object {
            "format": null,
            "modifiers": Array [
              "destructured",
            ],
            "selector": Array [
              "variable",
              "parameter",
            ],
          },
          Object {
            "format": Array [
              "camelCase",
            ],
            "leadingUnderscore": "allow",
            "selector": "parameter",
          },
          Object {
            "format": Array [
              "camelCase",
            ],
            "leadingUnderscore": "allowSingleOrDouble",
            "modifiers": Array [
              "private",
            ],
            "selector": "memberLike",
          },
          Object {
            "format": Array [
              "PascalCase",
            ],
            "selector": "typeLike",
          },
          Object {
            "format": Array [
              "PascalCase",
            ],
            "modifiers": Array [
              "exported",
            ],
            "prefix": Array [
              "I",
            ],
            "selector": "interface",
          },
          Object {
            "format": Array [
              "camelCase",
              "snake_case",
            ],
            "selector": Array [
              "memberLike",
            ],
          },
          Object {
            "format": null,
            "modifiers": Array [
              "requiresQuotes",
            ],
            "selector": Array [
              "memberLike",
            ],
          },
        ],
        "@typescript-eslint/no-extra-parens": Array [
          "error",
          "functions",
        ],
        "@typescript-eslint/no-namespace": "error",
        "@typescript-eslint/no-this-alias": "error",
        "@typescript-eslint/no-use-before-define": Array [
          "error",
          Object {
            "classes": false,
            "functions": false,
            "variables": false,
          },
        ],
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/semi": Array [
          "error",
          "never",
        ],
        "@typescript-eslint/triple-slash-reference": Array [
          "error",
          Object {
            "types": "prefer-import",
          },
        ],
        "brace-style": "off",
        "camelcase": "off",
        "func-call-spacing": "off",
        "import/export": "off",
        "import/named": "off",
        "indent": "off",
        "levitate/no-top-level-require": "error",
        "levitate/typescript-explicit-return-type": Array [
          "error",
          "onlyIfMoreThanOneReturns",
        ],
        "levitate/typescript-method-type": "error",
        "no-extra-parens": "off",
        "no-undef": "off",
        "no-unused-vars": "off",
        "no-use-before-define": "off",
        "semi": "off",
      },
    },
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": Object {
    "ecmaVersion": 2020,
    "sourceType": "module",
  },
  "plugins": Array [
    "@typescript-eslint/eslint-plugin",
    "eslint-plugin-import",
    "eslint-plugin-levitate",
    "eslint-plugin-node",
    "eslint-plugin-promise",
    "eslint-plugin-unicorn",
  ],
  "rules": Object {
    "array-bracket-newline": Array [
      "error",
      "consistent",
    ],
    "array-bracket-spacing": Array [
      "error",
      "never",
    ],
    "array-element-newline": Array [
      "error",
      "consistent",
    ],
    "arrow-parens": Array [
      "error",
      "as-needed",
    ],
    "arrow-spacing": "error",
    "block-spacing": Array [
      "error",
      "always",
    ],
    "brace-style": "error",
    "camelcase": "warn",
    "comma-dangle": Array [
      "error",
      "always-multiline",
    ],
    "comma-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": false,
      },
    ],
    "comma-style": Array [
      "error",
      "last",
    ],
    "computed-property-spacing": Array [
      "error",
      "never",
    ],
    "consistent-return": "error",
    "constructor-super": "error",
    "curly": Array [
      "error",
      "all",
    ],
    "dot-location": Array [
      "error",
      "property",
    ],
    "dot-notation": Array [
      "error",
      Object {
        "allowKeywords": true,
      },
    ],
    "eol-last": Array [
      "error",
      "always",
    ],
    "eqeqeq": Array [
      "error",
      "always",
      Object {
        "null": "ignore",
      },
    ],
    "func-call-spacing": Array [
      "error",
      "never",
    ],
    "generator-star-spacing": Array [
      "error",
      "after",
    ],
    "import/export": "error",
    "import/first": "error",
    "import/named": "error",
    "import/no-absolute-path": Array [
      "error",
      Object {
        "amd": false,
        "commonjs": true,
        "esmodule": true,
      },
    ],
    "import/no-duplicates": "error",
    "import/no-named-default": "error",
    "import/no-useless-path-segments": "error",
    "indent": Array [
      "error",
      2,
      Object {
        "SwitchCase": 1,
      },
    ],
    "key-spacing": Array [
      "error",
      Object {
        "afterColon": true,
        "beforeColon": false,
      },
    ],
    "keyword-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": true,
      },
    ],
    "levitate/comment": "warn",
    "levitate/import-convention": Array [
      "error",
      Object {
        "default": "classNames",
        "path": "^classnames$",
      },
      Object {
        "default": true,
        "path": "^(?!\\\\.|\\\\/)",
      },
    ],
    "levitate/new-line-within-statement": Array [
      "error",
      Object {
        "maxLength": 80,
      },
    ],
    "levitate/sort-imports": Array [
      "error",
      "manta",
    ],
    "lines-between-class-members": Array [
      "error",
      "always",
      Object {
        "exceptAfterSingleLine": true,
      },
    ],
    "max-nested-callbacks": Array [
      "error",
      4,
    ],
    "max-statements-per-line": Array [
      "error",
      Object {
        "max": 1,
      },
    ],
    "new-cap": Array [
      "error",
      Object {
        "capIsNew": false,
        "newIsCap": true,
        "properties": true,
      },
    ],
    "new-parens": "error",
    "no-array-constructor": "error",
    "no-async-promise-executor": "error",
    "no-compare-neg-zero": "error",
    "no-cond-assign": "error",
    "no-confusing-arrow": "error",
    "no-constant-condition": Array [
      "error",
      Object {
        "checkLoops": false,
      },
    ],
    "no-control-regex": "error",
    "no-debugger": "error",
    "no-delete-var": "error",
    "no-dupe-args": "error",
    "no-dupe-class-members": "error",
    "no-dupe-keys": "error",
    "no-duplicate-case": "error",
    "no-else-return": "error",
    "no-empty": "error",
    "no-empty-character-class": "error",
    "no-empty-pattern": "error",
    "no-eval": "error",
    "no-ex-assign": "error",
    "no-extend-native": "error",
    "no-extra-bind": "error",
    "no-extra-boolean-cast": "error",
    "no-extra-parens": Array [
      "error",
      "functions",
    ],
    "no-fallthrough": "error",
    "no-func-assign": "error",
    "no-global-assign": "error",
    "no-implicit-coercion": Array [
      "error",
      Object {
        "allow": Array [
          "!!",
        ],
      },
    ],
    "no-implied-eval": "error",
    "no-inner-declarations": Array [
      "error",
      "functions",
    ],
    "no-invalid-regexp": "error",
    "no-irregular-whitespace": "error",
    "no-iterator": "error",
    "no-labels": Array [
      "error",
      Object {
        "allowLoop": false,
        "allowSwitch": false,
      },
    ],
    "no-lone-blocks": "error",
    "no-misleading-character-class": "error",
    "no-mixed-spaces-and-tabs": "error",
    "no-multi-spaces": "error",
    "no-multi-str": "error",
    "no-multiple-empty-lines": Array [
      "error",
      Object {
        "max": 1,
        "maxBOF": 0,
        "maxEOF": 1,
      },
    ],
    "no-nested-ternary": "error",
    "no-new": "error",
    "no-new-func": "error",
    "no-new-object": "error",
    "no-new-symbol": "error",
    "no-new-wrappers": "error",
    "no-obj-calls": "error",
    "no-octal": "error",
    "no-octal-escape": "error",
    "no-promise-executor-return": "error",
    "no-proto": "error",
    "no-prototype-builtins": "error",
    "no-redeclare": Array [
      "error",
      Object {
        "builtinGlobals": false,
      },
    ],
    "no-regex-spaces": "error",
    "no-return-assign": Array [
      "error",
      "except-parens",
    ],
    "no-return-await": "error",
    "no-self-assign": Array [
      "error",
      Object {
        "props": true,
      },
    ],
    "no-self-compare": "error",
    "no-sequences": "error",
    "no-shadow-restricted-names": "error",
    "no-sparse-arrays": "error",
    "no-template-curly-in-string": "warn",
    "no-this-before-super": "error",
    "no-throw-literal": "error",
    "no-trailing-spaces": "error",
    "no-undef": "error",
    "no-undef-init": "error",
    "no-unexpected-multiline": "error",
    "no-unmodified-loop-condition": "error",
    "no-unneeded-ternary": Array [
      "error",
      Object {
        "defaultAssignment": false,
      },
    ],
    "no-unreachable": "error",
    "no-unsafe-finally": "error",
    "no-unsafe-negation": "error",
    "no-unused-expressions": Array [
      "error",
      Object {
        "allowShortCircuit": true,
        "allowTaggedTemplates": true,
        "allowTernary": true,
      },
    ],
    "no-unused-vars": Array [
      "error",
      Object {
        "args": "none",
        "ignoreRestSiblings": true,
        "vars": "all",
      },
    ],
    "no-use-before-define": Array [
      "error",
      Object {
        "classes": false,
        "functions": false,
        "variables": false,
      },
    ],
    "no-useless-call": "error",
    "no-useless-catch": "error",
    "no-useless-computed-key": "error",
    "no-useless-concat": "error",
    "no-useless-rename": "error",
    "no-useless-return": "error",
    "no-var": "error",
    "no-whitespace-before-property": "error",
    "no-with": "error",
    "node/handle-callback-err": Array [
      "error",
      "error",
    ],
    "node/no-deprecated-api": "warn",
    "node/no-new-require": "error",
    "node/no-path-concat": "error",
    "node/process-exit-as-throw": "error",
    "object-curly-newline": Array [
      "error",
      Object {
        "ExportDeclaration": Object {
          "consistent": true,
          "multiline": true,
        },
        "ImportDeclaration": "never",
        "ObjectExpression": Object {
          "consistent": true,
          "multiline": true,
        },
        "ObjectPattern": "never",
      },
    ],
    "object-curly-spacing": Array [
      "error",
      "always",
    ],
    "object-property-newline": "error",
    "object-shorthand": Array [
      "error",
      "properties",
    ],
    "operator-linebreak": Array [
      "error",
      "after",
      Object {
        "overrides": Object {
          ":": "before",
          "?": "before",
          "|>": "before",
        },
      },
    ],
    "padding-line-between-statements": Array [
      "error",
      Object {
        "blankLine": "always",
        "next": "*",
        "prev": "directive",
      },
      Object {
        "blankLine": "always",
        "next": "block-like",
        "prev": "*",
      },
      Object {
        "blankLine": "never",
        "next": "block-like",
        "prev": Array [
          "singleline-const",
          "singleline-let",
          "singleline-var",
        ],
      },
      Object {
        "blankLine": "never",
        "next": "case",
        "prev": "case",
      },
      Object {
        "blankLine": "always",
        "next": "*",
        "prev": "block-like",
      },
      Object {
        "blankLine": "always",
        "next": Array [
          "function",
          "try",
        ],
        "prev": "*",
      },
      Object {
        "blankLine": "always",
        "next": Array [
          "const",
          "let",
          "var",
          "export",
          "cjs-export",
          "return",
          "throw",
          "break",
          "continue",
        ],
        "prev": "expression",
      },
    ],
    "prefer-arrow-callback": "error",
    "prefer-const": "error",
    "prefer-promise-reject-errors": "error",
    "promise/param-names": "error",
    "quote-props": Array [
      "error",
      "as-needed",
    ],
    "quotes": Array [
      "error",
      "single",
    ],
    "rest-spread-spacing": Array [
      "error",
      "never",
    ],
    "semi": Array [
      "error",
      "never",
    ],
    "semi-spacing": Array [
      "error",
      Object {
        "after": true,
        "before": false,
      },
    ],
    "space-before-blocks": Array [
      "error",
      "always",
    ],
    "space-before-function-paren": Array [
      "error",
      Object {
        "anonymous": "never",
        "asyncArrow": "always",
        "named": "never",
      },
    ],
    "space-in-parens": Array [
      "error",
      "never",
    ],
    "space-infix-ops": "error",
    "space-unary-ops": Array [
      "error",
      Object {
        "nonwords": false,
        "words": true,
      },
    ],
    "spaced-comment": Array [
      "error",
      "always",
      Object {
        "block": Object {
          "balanced": true,
          "exceptions": Array [
            "*",
          ],
          "markers": Array [
            "*package",
            "!",
            ",",
            ":",
            "::",
            "flow-include",
          ],
        },
        "line": Object {
          "markers": Array [
            "*package",
            "!",
            "/",
            ",",
            "=",
          ],
        },
      },
    ],
    "symbol-description": "error",
    "template-curly-spacing": Array [
      "error",
      "never",
    ],
    "template-tag-spacing": Array [
      "error",
      "never",
    ],
    "unicode-bom": Array [
      "error",
      "never",
    ],
    "unicorn/catch-error-name": Array [
      "error",
      Object {
        "name": "error",
      },
    ],
    "unicorn/error-message": "error",
    "unicorn/escape-case": "error",
    "unicorn/explicit-length-check": Array [
      "error",
      Object {
        "non-zero": "greater-than",
      },
    ],
    "unicorn/import-index": "error",
    "unicorn/no-for-loop": "error",
    "unicorn/no-unreadable-array-destructuring": "error",
    "unicorn/number-literal-case": "error",
    "unicorn/prefer-event-key": "error",
    "unicorn/throw-new-error": "error",
    "use-isnan": "error",
    "valid-typeof": Array [
      "error",
      Object {
        "requireStringLiterals": true,
      },
    ],
    "wrap-iife": Array [
      "error",
      "any",
      Object {
        "functionPrototypeMethods": true,
      },
    ],
    "yield-star-spacing": Array [
      "error",
      "after",
    ],
    "yoda": Array [
      "error",
      "never",
    ],
  },
}
`;

exports[`ts generates the same package.json 1`] = `
Object {
  "devDependencies": Object {
    "@typescript-eslint/eslint-plugin": "^4.22.0",
    "@typescript-eslint/parser": "^4.22.0",
    "babel-eslint": "^10.1.0",
    "eslint": "^7.24.0",
    "eslint-plugin-import": "^2.22.1",
    "eslint-plugin-levitate": "^3.8.6",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-promise": "^5.1.0",
    "eslint-plugin-unicorn": "^29.0.0",
    "typescript": "^4.2.4",
  },
}
`;

exports[`ts yields the same linting results 1`] = `
"ts/naming-convention.ts: line 2, col 14, Warning - Class name \`camelCase2\` must match one of the following formats: PascalCase (@typescript-eslint/naming-convention)
ts/naming-convention.ts: line 3, col 11, Warning - Interface name \`camelCase3\` must match one of the following formats: PascalCase (@typescript-eslint/naming-convention)
ts/naming-convention.ts: line 4, col 18, Warning - Interface name \`camelCase4\` must have one of the following prefixes: I (@typescript-eslint/naming-convention)
ts/naming-convention.ts: line 5, col 13, Warning - Type Alias name \`camelCase5\` must match one of the following formats: PascalCase (@typescript-eslint/naming-convention)
ts/naming-convention.ts: line 6, col 13, Warning - Enum name \`camelCase6\` must match one of the following formats: PascalCase (@typescript-eslint/naming-convention)
ts/naming-convention.ts: line 11, col 18, Warning - Interface name \`PascalCase4\` must have one of the following prefixes: I (@typescript-eslint/naming-convention)
ts/naming-convention.ts: line 22, col 3, Warning - Type Property name \`PascalCase\` must match one of the following formats: camelCase, snake_case (@typescript-eslint/naming-convention)
ts/naming-convention.ts: line 29, col 3, Warning - Object Literal Property name \`PascalCase\` must match one of the following formats: camelCase, snake_case (@typescript-eslint/naming-convention)
ts/naming-convention.ts: line 35, col 6, Warning - Enum name \`camelCaseEnum\` must match one of the following formats: PascalCase (@typescript-eslint/naming-convention)
ts/naming-convention.ts: line 37, col 24, Warning - Object Literal Property name \`no_Check\` must match one of the following formats: camelCase, snake_case (@typescript-eslint/naming-convention)
"
`;
